#!/usr/bin/env bash
# disable stack limit so you don't get RE with recursion
ulimit -s unlimited
# some problems have 10MB+ input/output files in their test cases and you might get RE. uncomment if needed
# ulimit -f 2097152

# Check if grader_config.json exists
if [ ! -f "graders/grader_config.json" ]; then
    echo "Error: graders/grader_config.json not found" >&2
    echo "Current directory contents:" >&2
    find . -type f -o -type d | sed -e 's/[^-][^\/]*\//  |/g' -e 's/|\([^ ]\)/|-\1/' >&2
    exit 1
fi

# Read task type, code, and time limit from grader_config.json using grep and sed
TASK_TYPE=$(grep -o '"task_type":[^,}]*' graders/grader_config.json | sed 's/"task_type":\s*"\([^"]*\)"/\1/')
TASK_NAME=$(grep -o '"code":[^,}]*' graders/grader_config.json | sed 's/"code":\s*"\([^"]*\)"/\1/')
TIME_LIMIT=$(grep -o '"time_limit":[^,}]*' graders/grader_config.json | sed 's/"time_limit":\s*\([^,}]*\)/\1/')
MEMORY_LIMIT=$(grep -o '"memory_limit":[^,}]*' graders/grader_config.json | sed 's/"memory_limit":\s*\([^,}]*\)/\1/')
TASK_EXECUTABLE="graders/$TASK_NAME"

# Set memory limit in KB (convert from bytes)
MEMORY_LIMIT_KB=0
if [ -n "$MEMORY_LIMIT" ]; then
    MEMORY_LIMIT_KB=$((MEMORY_LIMIT / 1024))
    # Set the memory limit for the entire script and all child processes
    ulimit -v $MEMORY_LIMIT_KB
fi

# "Securely" handle the correct output file
CORRECT_OUTPUT=""
if [ -f "correct_output.txt" ]; then
    # Read the content and immediately remove the file
    CORRECT_OUTPUT=$(cat correct_output.txt)
    rm -f correct_output.txt
fi

# Create a temporary file for solution output
SOLUTION_OUTPUT=$(mktemp)

# Global variables for process tracking
declare -a ALL_PIDS
declare -a FIFO_DIRS

# Define cleanup function - simplified assuming timeout exists
function cleanup {
    # Kill all tracked processes silently
    exec 2>/dev/null
    for pid in "${ALL_PIDS[@]:-}"; do
        kill -9 "$pid" 2>/dev/null || true
    done

    # Clean up FIFO directories
    for dir in "${FIFO_DIRS[@]:-}"; do
        [ -d "$dir" ] && rm -rf "$dir"
    done

    # Clean up temporary files
    rm -f "$SOLUTION_OUTPUT" || true
    exec 2>&2
}

# Set up signal handling
trap cleanup EXIT INT TERM

# Function to handle exit codes consistently across task types
function handle_exit_code {
    local exit_code=$1

    # Check for known timeout exit codes:
    # - 124: standard timeout exit code
    # - 137: SIGKILL (128+9), used for hard timeouts
    # - 143: SIGTERM (128+15), can also be used for timeouts
    if [ $exit_code -eq 124 ] || [ $exit_code -eq 137 ] || [ $exit_code -eq 143 ]; then
        echo "0"
        echo "Time limit exceeded (${TIME_LIMIT}s)" >&2
        return 124
    # All other non-zero exit codes should be treated as runtime errors
    elif [ $exit_code -ne 0 ]; then
        echo "0"
        echo "Runtime error with exit code $exit_code" >&2
        return $exit_code
    fi

    # Success case - return 0
    return 0
}

# Function to run a command with timeout (simplified assuming timeout exists)
function run_with_timeout {
    local soft_limit=$1; shift
    local command_to_run="$@"

    timeout --preserve-status "$soft_limit" "$@"
    return $?
}

case "$TASK_TYPE" in
    "Batch")
        # Simple batch execution with timeout
        run_with_timeout "$TIME_LIMIT" ./$TASK_EXECUTABLE < input.txt > "$SOLUTION_OUTPUT"
        exit_code=$?

        # Handle non-zero exit codes
        handle_exit_code $exit_code
        if [ $? -ne 0 ]; then
            exit $?
        fi

        # Check the output if we have a correct output
        if [ -n "$CORRECT_OUTPUT" ]; then
            # Restore the correct output file
            echo "$CORRECT_OUTPUT" > correct_output.txt

            # Check if there's a custom checker
            if [ -f "checker/checker" ]; then
                # Let the checker handle everything
                ./checker/checker input.txt correct_output.txt "$SOLUTION_OUTPUT"
                exit $?
            else
                # Simple diff-based checking
                if diff -bq <(echo "$CORRECT_OUTPUT") "$SOLUTION_OUTPUT" >/dev/null; then
                    echo "1"
                    echo "Output is correct (diff)" >&2
                else
                    echo "0"
                    echo "Output isn't correct (diff)" >&2
                    exit 0
                fi
            fi
        else
            # If no correct output was provided, just output the solution's output
            cat "$SOLUTION_OUTPUT"
        fi
        ;;

    "Communication")
        # Read Communication-specific parameters
        NUM_PROCESSES=$(grep -o '"task_type_parameters_Communication_num_processes":[^,}]*' graders/grader_config.json | sed 's/.*:\s*\([0-9]*\)/\1/' || true)
        if [ -z "$NUM_PROCESSES" ]; then
            NUM_PROCESSES=1
        fi
        USER_IO=$(grep -o '"task_type_parameters_Communication_user_io":[^,}]*' graders/grader_config.json | sed 's/.*:\s*"\([^"]*\)"/\1/' || echo "std_io")

        # Read custom manager arguments if they exist
        MANAGER_CUSTOM_ARGS=""
        if grep -q '"task_type_parameters_Communication_manager_args"' graders/grader_config.json; then
            MANAGER_CUSTOM_ARGS=$(grep -o '"task_type_parameters_Communication_manager_args":[^,}]*' graders/grader_config.json | sed 's/.*:\s*"\([^"]*\)"/\1/')
        fi

        # Create temporary directories for FIFOs
        for i in $(seq 0 $((NUM_PROCESSES-1))); do
            FIFO_DIRS[$i]=$(mktemp -d)

            # Create FIFOs for this process
            mkfifo "${FIFO_DIRS[$i]}/u${i}_to_m"
            mkfifo "${FIFO_DIRS[$i]}/m_to_u${i}"
            chmod 755 "${FIFO_DIRS[$i]}"
            chmod 666 "${FIFO_DIRS[$i]}/u${i}_to_m" "${FIFO_DIRS[$i]}/m_to_u${i}"
        done

        # Prepare manager arguments
        MANAGER_ARGS=""
        for i in $(seq 0 $((NUM_PROCESSES-1))); do
            MANAGER_ARGS="$MANAGER_ARGS ${FIFO_DIRS[$i]}/u${i}_to_m ${FIFO_DIRS[$i]}/m_to_u${i}"
        done

        # Add custom manager arguments if specified
        if [ -n "$MANAGER_CUSTOM_ARGS" ]; then
            MANAGER_ARGS="$MANAGER_ARGS $MANAGER_CUSTOM_ARGS"
        fi

        # Start all user processes first
        for i in $(seq 0 $((NUM_PROCESSES-1))); do
            if [ "$USER_IO" = "fifo_io" ]; then
                # Pass FIFOs as arguments
                ARGS="${FIFO_DIRS[$i]}/m_to_u${i} ${FIFO_DIRS[$i]}/u${i}_to_m"
                if [ "$NUM_PROCESSES" -ne 1 ]; then
                    ARGS="$ARGS $i"
                fi
                ./$TASK_EXECUTABLE $ARGS &
                ALL_PIDS+=($!)
            else
                # Use stdin/stdout redirection
                if [ "$NUM_PROCESSES" -ne 1 ]; then
                    ./$TASK_EXECUTABLE "$i" < "${FIFO_DIRS[$i]}/m_to_u${i}" > "${FIFO_DIRS[$i]}/u${i}_to_m" 2>/dev/null &
                    ALL_PIDS+=($!)
                else
                    ./$TASK_EXECUTABLE < "${FIFO_DIRS[$i]}/m_to_u${i}" > "${FIFO_DIRS[$i]}/u${i}_to_m" 2>/dev/null &
                    ALL_PIDS+=($!)
                fi
            fi
        done

        # Run the manager with timeout using direct pipe from input.txt
        run_with_timeout "$TIME_LIMIT" ./graders/manager $MANAGER_ARGS < input.txt > "$SOLUTION_OUTPUT"

        exit_code=$?

        # Handle non-zero exit codes
        handle_exit_code $exit_code
        if [ $? -ne 0 ]; then
            exit $?
        fi

        # Check the output if we have a correct output AND there's a checker (otherwise we assume the manager handles everything)
        if [ -n "$CORRECT_OUTPUT" ] && [ -f "checker/checker" ]; then
            # Restore the correct output file
            echo "$CORRECT_OUTPUT" > correct_output.txt

            # Let the checker handle it
            ./checker/checker input.txt correct_output.txt "$SOLUTION_OUTPUT"
            exit $?
        else
            # we assume the manager handles it
            cat "$SOLUTION_OUTPUT"
        fi
        ;;

    *)
        echo "0"
        echo "Unsupported task type \"$TASK_TYPE\"" >&2
        exit 1
        ;;
esac